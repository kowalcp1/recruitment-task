{"version":3,"sources":["store/actions/search/actionTypes.ts","store/reducers/search/index.ts","store/sagas/search/saga.ts","store/actions/search/index.ts","store/createStore.ts","views/Search/Search.tsx","views/MovieContainer/MovieContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchByName","initialState","movie","searchByName","action","searchText","payload","axios","get","API_KEY","resp","put","data","type","ActionTypes","Succeeded","call","resolvePromiseAction","rejectPromiseAction","searchSaga","takeLatest","PromiseTrigger","saga","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","search","state","composeWithDevTools","applyMiddleware","promiseMiddleware","all","run","SearchForm","styled","form","SearchFormInput","input","SearchButton","button","Search","dispatch","useDispatch","useState","setSearchText","onSubmit","e","preventDefault","createPromiseAction","Trigger","onChange","target","value","placeholder","MovieWrapper","section","MovieItem","div","MovieTitle","h1","MovieDetails","h4","MovieContainer","useSelector","Response","Title","imdbRating","Director","Actors","Released","BoxOffice","src","Poster","Wrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92ca7f5e.chunk.js","sourcesContent":["export enum SearchByName {\n    Trigger = 'SEARCH_BY_NAME',\n    Succeeded = 'SEARCH_BY_NAME_SUCCEEDED',\n\n    PromiseTrigger = 'SEARCH_BY_NAME.TRIGGER'\n}\n","import * as ActionTypes from '../../actions/search/actionTypes';\n\nexport interface Movie {\n    Title: string;\n    Year: string;\n    Rated: string;\n    Released: string;\n    Runtime: string;\n    Genre: string;\n    Director: string;\n    Writer: string;\n    Actors: string;\n    Plot: string;\n    Language: string;\n    Country: string;\n    Awards: string;\n    Poster: string;\n    Metascore: string;\n    imdbRating: string;\n    imdbVotes: string;\n    imdbID: string;\n    Type: string;\n    DVD: string;\n    BoxOffice: string;\n    Production: string;\n    Website: string;\n    Response: string;\n}\n\nexport interface SearchReducer {\n    movie: Movie | null;\n}\n\nexport const initialState: SearchReducer = {\n    movie: null\n};\n\nexport default (state = initialState, { type, ...action }: any) => {\n    switch (type) {\n        case ActionTypes.SearchByName.Succeeded: {\n            const movie = action.payload;\n            return {\n                ...state,\n                movie\n            };\n        }\n        default:\n            return state;\n    }\n}\n","// @ts-ignore\nimport { rejectPromiseAction, resolvePromiseAction } from '@adobe/redux-saga-promise';\nimport axios, { AxiosResponse } from \"axios\";\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\nimport { API_KEY } from '../../../App';\nimport * as actions from '../../actions';\nimport * as ActionTypes from '../../actions/search/actionTypes';\n\n// @ts-ignore\nexport function* searchByName(action) {\n    const { searchText } = action.payload;\n    try {\n        const resp: AxiosResponse<any> = yield axios.get(`https://www.omdbapi.com/?apikey=${API_KEY}&t=${searchText}`);\n        yield put(actions.searchByNameSucceeded(resp.data));\n        yield call(resolvePromiseAction, action)\n    } catch (err) {\n        yield call(rejectPromiseAction, action);\n    }\n}\n\nexport const searchSaga = [\n    takeLatest(ActionTypes.SearchByName.PromiseTrigger, searchByName)\n];\n","// @ts-ignore\nimport { createPromiseAction } from \"@adobe/redux-saga-promise\";\n\nimport * as ActionTypes from './actionTypes';\nimport { Movie } from \"../../reducers/search\";\n\nexport const searchByName = (payload: { searchText: string }) => createPromiseAction(ActionTypes.SearchByName.Trigger)(payload);\nexport const searchByNameSucceeded = (payload: Movie) => ({\n    type: ActionTypes.SearchByName.Succeeded,\n    payload\n});\n","// @ts-ignore\nimport { promiseMiddleware } from '@adobe/redux-saga-promise'\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { all } from 'redux-saga/effects';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport search from './reducers/search';\nimport { searchSaga } from \"./sagas/search/saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = createStore(\n    combineReducers({\n        search\n    }),\n    composeWithDevTools(applyMiddleware(\n        promiseMiddleware,\n        sagaMiddleware\n    ))\n);\n\nfunction* saga() {\n    yield all([\n        ...searchSaga\n    ]);\n}\n\nsagaMiddleware.run(saga);\n","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport * as actions from \"../../store/actions\";\r\n\r\nconst SearchForm = styled.form`\r\n    margin: 2em;\r\n    color: #eee;\r\n`;\r\n\r\nconst SearchFormInput = styled.input`\r\n    padding: 0.75em 1em;\r\n    margin 0.5em;\r\n    border-radius: 1em;\r\n    border: 2px solid #ccc;\r\n    outline: none;\r\n`\r\n\r\nconst SearchButton = styled.button`\r\n    padding: 0.75em 1em;\r\n    margin 0.5em;\r\n    border-radius: 1em;\r\n    border: 2px solid #ccc;\r\n    outline: none;\r\n    transition: box-shadow 0.3s;\r\n    background: #fff;\r\n    &:hover {\r\n        cursor: pointer;\r\n        box-shadow: 0 0 1em #ccc;\r\n    }\r\n`\r\n\r\nconst Search = () => {\r\n    const dispatch = useDispatch();\r\n    const [searchText, setSearchText] = useState(\"\");\r\n\r\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n        setSearchText(e.target.value);\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        dispatch(actions.searchByName({ searchText }))\r\n    };\r\n\r\n    return (\r\n        <SearchForm onSubmit={handleSubmit}>\r\n            <SearchFormInput\r\n                onChange={handleSearch}\r\n                value={searchText}\r\n                placeholder=\"Search for movie...\"\r\n            />\r\n            <SearchButton type=\"submit\">Search</SearchButton>\r\n        </SearchForm>\r\n    );\r\n}\r\n\r\nexport default Search;","import styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { ReduxStore } from \"../../store/types\";\r\n\r\nconst MovieWrapper = styled.section`\r\n    flex: 1;\r\n`;\r\n\r\nconst MovieItem = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    padding: 2em;\r\n    margin: 1em;\r\n    border: 2px solid coral;\r\n    border-radius: 1em;\r\n    background: khaki;\r\n`;\r\n\r\nconst MovieTitle = styled.h1`\r\n    color: coral;\r\n`;\r\n\r\nconst MovieDetails = styled.h4`\r\n    color: #ccc;\r\n`\r\n\r\nconst MovieContainer = () => {\r\n    const { movie } = useSelector((state: ReduxStore) => state.search);\r\n\r\n    return (\r\n        movie && movie.Response !== \"False\" ? <MovieWrapper>\r\n            <MovieItem>\r\n                <div>\r\n                    <MovieTitle>{movie.Title}</MovieTitle>\r\n                    <MovieDetails>Rating: {movie.imdbRating}</MovieDetails>\r\n                    <MovieDetails>Director: {movie.Director}</MovieDetails>\r\n                    <MovieDetails>Actors: {movie.Actors}</MovieDetails>\r\n                    <MovieDetails>Released: {movie.Released}</MovieDetails>\r\n                    {movie.BoxOffice !== \"N/A\" && <MovieDetails>Box office: {movie.BoxOffice}</MovieDetails>}\r\n                </div>\r\n                <img src={movie.Poster} />\r\n            </MovieItem>\r\n        </MovieWrapper> : null\r\n    );\r\n}\r\n\r\nexport default MovieContainer;","import styled from \"styled-components\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./store/createStore\";\nimport Search from \"./views/Search/Search\";\nimport MovieContainer from \"./views/MovieContainer/MovieContainer\";\n\nconst Wrapper = styled.div`\n    text-align: center;\n`;\n\nexport const API_KEY = \"10925ff4\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Wrapper>\n                <Search />\n                <MovieContainer />\n            </Wrapper>\n        </Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}